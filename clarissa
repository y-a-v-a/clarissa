#!/usr/bin/env node
const program = require('commander');
const clarissa = require('./index');
const arguments = process.argv;

const allCiphers = clarissa.getCiphers();
const cipherRegexp = new RegExp(`^(${allCiphers.join('|')})$`);

program.version('0.0.1')
  .usage('[options]')
  .description('CLI app for Clarissa')
  .option('-t, --text <text>', 'Text to encrypt/decrypt', /^[a-zA-Z0-9 ]+$/)
  .option('-c, --cipher [cipher]', 'Encrypt given string', cipherRegexp, allCiphers[0])
  .option('-e, --encrypt', 'Encrypt given string')
  .option('-d, --decrypt', 'Decrypt given string')
  .option('-k, --key [key]', 'Key to be used for the Vigenere cipher')
  .option('-o, --offset', 'Offset to be used for the Caesar cipher')
  .option('-l, --list', 'List available ciphers')
  .action(function(program) {
    if (!program.list) {
      return;
    }
    console.log(`Available ciphers:

${allCiphers.join('\n')}
    `);
  })
  .option('-vv, --verbose', 'Verbose output');

program.on('--help', function() {
  console.log(`
Examples:
  $ clarissa -e -c Vigenere -k mykey -t 'plaintext'
`);
});

program.parse(process.argv);

const cipher = program.cipher;
const key = program.key;
const text = program.text;
const decrypt = program.decrypt || false;
const encrypt = program.encrypt || false;

try {
  if (typeof text === 'boolean') {
    throw new Error('No text given or invalid characters found. Please adhere to RegExp /[a-zA-Z0-9 ]+/');
  }

  let cipherInstance;
  let result = '';
  if (encrypt) {
    cipherInstance = clarissa.createCipher(cipher);
    result = cipherInstance.encrypt(text, key);
  } else if (decrypt) {
    cipherInstance = clarissa.createDecipher(cipher);
    result = cipherInstance.decrypt(text, key);
  } else {
    throw new Error('Please supply either -e or -d');
  }

  console.log(result);
} catch (exception) {
  console.log(exception.message);
  process.exit(1);
}
